//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace SpotHunt
{
		public class StupidSearch : Search
		{
		Playfield playfield;

			public StupidSearch (Playfield playfield)
			{
				this.playfield = playfield;
			}

		public List<Cell> findPath(GoalSpot goal, MovingSpot spot) {
			//System.out.println("MovingSpot: " + spot.toString());
			//System.out.println("GoalSpot: " + goal.toString());
			
			List<Cell>path = new List<Cell>();
			int xGoal = goal.getX();
			int yGoal = goal.getY();
			int xSpot = spot.getX();
			int ySpot = spot.getY();
			int xDirection;
			int yDirection;
			
			
			if(xGoal-xSpot==0) {
				xDirection = 0;
			} else if(xGoal-xSpot>0) {
				xDirection = -1;
			} else {
				xDirection = 1;
			}
			
			if(yGoal-ySpot==0) {
				yDirection = 0;
			} else if(yGoal-ySpot>0) {
				yDirection = -1;
			} else {
				yDirection = 1;
			}
			
			Cell nextMove = getNextMove(xSpot, ySpot, xDirection, yDirection, 0, 0, spot);
			path.Add(nextMove);
			bool foundTarget = false;
			while(!foundTarget) {
				nextMove = getNextMove(path[path.Count-1].getX(), path[path.Count-1].getY(), xDirection, yDirection, 0, 0, spot);
				path.Add(nextMove);
				if(nextMove.getX()==goal.getX() && nextMove.getY()==goal.getY()) foundTarget = true;
			}
			//System.out.println("Path Length: " + path.size());
			for(int i =0; i<path.Count; i++) {
			//	System.out.println("Step " + (i+1) + ": [" + path.get(i).getX() + ", " + path.get(i).getY() + "]");
			}
			return path;
		}
		
		public Cell getNextMove (int x, int y, int xDirection, int yDirection, int remainingX, int remainingY, MovingSpot spot) {
			List<Cell> CellDanger = new List<Cell>();
			if(y+1<spot.playfield.height) CellDanger.Add(spot.playfield.cells[x][y+1]);
			if(y-1>=0) CellDanger.Add(spot.playfield.cells[x][y-1]);
			if(x+1<spot.playfield.width) CellDanger.Add(spot.playfield.cells[x+1][y]);
			if(x-1>=0) CellDanger.Add(spot.playfield.cells[x-1][y]);
			if(x-1>=0 && y-1>=0) CellDanger.Add(spot.playfield.cells[x-1][y-1]);
			if(x+1<spot.playfield.width && y+1<spot.playfield.height) CellDanger.Add(spot.playfield.cells[x+1][y+1]);
			if(x-1>=0 && y+1<spot.playfield.height) CellDanger.Add(spot.playfield.cells[x-1][y+1]);
			if(x+1<spot.playfield.width && y-1>=0) CellDanger.Add(spot.playfield.cells[x+1][y-1]);
			Random random = new Random ();
			int picked = random.Next(0, CellDanger.Count);
			Cell next = CellDanger[picked];
			return next;
		} 
				
		}
}

